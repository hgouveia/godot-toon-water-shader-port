[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[ext_resource path="res://Textures/PerlinNoise.png" type="Texture" id=1]
[ext_resource path="res://Textures/WaterDistortion.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "/**
* Ported from the original unity shader by Erik Roystan Ross
* https://roystan.net/articles/toon-water.html
* https://github.com/IronWarrior/ToonWaterShader
* Camera Depth taken from Miziziziz's video on: https://youtu.be/PLCGL3RW548?t=1164
*/

shader_type spatial;

uniform sampler2D surfaceNoise;
uniform sampler2D distortNoise;

uniform float foam_distance = 0.01;
uniform float foam_max_distance = 0.4;
uniform float foam_min_distance = 0.04;
uniform vec4 foam_color: hint_color  = vec4(1.0);

uniform vec2 surface_noise_tiling = vec2(1.0, 4.0);
uniform vec3 surface_noise_scroll = vec3(0.03, 0.03, 0.0);
uniform float surface_noise_cutoff: hint_range(0, 1) = 0.777;
uniform float surface_distortion_amount: hint_range(0, 1) = 0.27;

uniform vec4 _DepthGradientShallow: hint_color = vec4(0.325, 0.807, 0.971, 0.725);
uniform vec4 _DepthGradientDeep: hint_color = vec4(0.086, 0.407, 1, 0.749);
uniform float _DepthMaxDistance: hint_range(0, 1) = 1.0;
uniform float _DepthFactor = 1.0;

uniform float near = 0.01; // 0.15
uniform float far = 300.0; // 300.0

varying vec4 screenPos;
varying vec2 noiseUV;
varying vec2 distortUV;
varying vec3 viewNormal;

vec4 alphaBlend(vec4 top, vec4 bottom)
{
	vec3 color = (top.rgb * top.a) + (bottom.rgb * (1.0 - top.a));
	float alpha = top.a + bottom.a * (1.0 - top.a);
	
	return vec4(color, alpha);
}

float linearize(float c_depth){
	c_depth = 2.0 * c_depth - 1.0; // -1, 1 range
	return near * far / (far + c_depth * (near - far));
}

void vertex() {
	viewNormal = (MODELVIEW_MATRIX * vec4(NORMAL, 0.0)).xyz;
	noiseUV = UV * surface_noise_tiling;
	distortUV = UV;
}

void fragment(){
	// https://youtu.be/PLCGL3RW548?t=1164
	vec4 depthTexture = texture(DEPTH_TEXTURE, SCREEN_UV);
	float zdepth = linearize(depthTexture.r);
	float zpos = linearize(FRAGCOORD.z);
	float depth = zdepth - zpos;
	
	// Still unsure how to get properly the NORMAL from the camera
	// this was my best attempt
	vec3 existingNormal = vec3(dFdx(depth), dFdy(depth), 0);
	
	float normalDot = clamp(dot(existingNormal.xyz, viewNormal), 0.0, 1.0);
	float foamDistance = mix(foam_max_distance, foam_min_distance, normalDot);
	
	float foamDepth = clamp(depth / foamDistance, 0.0, 1.0);
	float surfaceNoiseCutoff = foamDepth * surface_noise_cutoff;
	
	vec4 distortNoiseSample = texture(distortNoise, distortUV);
	vec2 distortAmount = (distortNoiseSample.xy * 2.0 -1.0) * surface_distortion_amount;
	
	vec2 noise_uv = vec2(
		(noiseUV.x + TIME * surface_noise_scroll.x) + distortAmount.x , 
		(noiseUV.y + TIME * surface_noise_scroll.y + distortAmount.y)
	);
	float surfaceNoiseSample = texture(surfaceNoise, noise_uv).r;
	float surfaceNoiseAmount = surfaceNoiseSample > surfaceNoiseCutoff ? 1.0 : 0.0;
	
	float waterDepth = clamp(depth / _DepthMaxDistance, 0.0, 1.0) * _DepthFactor;
	vec4 waterColor = mix(_DepthGradientShallow, _DepthGradientDeep, waterDepth);

	vec4 surfaceNoiseColor = foam_color;
    surfaceNoiseColor.a *= surfaceNoiseAmount;
	vec4 color = alphaBlend(surfaceNoiseColor, waterColor);
	
	ALBEDO = color.rgb;
	ALPHA = color.a;
}"

[resource]
shader = SubResource( 1 )
shader_param/foam_distance = 0.1
shader_param/foam_max_distance = 0.1
shader_param/foam_min_distance = 0.04
shader_param/foam_color = Color( 1, 1, 1, 1 )
shader_param/surface_noise_tiling = Vector2( 1, 4 )
shader_param/surface_noise_scroll = Vector3( 0.03, 0.03, 0 )
shader_param/surface_noise_cutoff = 0.777
shader_param/surface_distortion_amount = 0.27
shader_param/_DepthGradientShallow = Color( 0, 0.545098, 0.729412, 0.72549 )
shader_param/_DepthGradientDeep = Color( 0, 0, 1, 0.760784 )
shader_param/_DepthMaxDistance = 1.0
shader_param/_DepthFactor = 1.15
shader_param/near = 0.15
shader_param/far = 30.0
shader_param/surfaceNoise = ExtResource( 1 )
shader_param/distortNoise = ExtResource( 2 )
